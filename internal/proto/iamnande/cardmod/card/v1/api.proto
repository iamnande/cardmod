syntax = "proto3";

package iamnande.cardmod.card.v1;

option go_package = "github.com/iamnande/cardmod/pkg/api/cardv1;cardv1";

import "validate/validate.proto";
import "google/api/annotations.proto";
import "iamnande/cardmod/card/v1/card.proto";

// Card Service
service CardAPI {

    // ListCards lists all available card resources.
    rpc ListCards(ListCardsRequest) returns (ListCardsResponse) {
        option (google.api.http) = {
            get: "/v1/cards"
        };
    }

    // DescribeCard describes a single card.
    rpc DescribeCard(DescribeCardRequest) returns (DescribeCardResponse) {
        option (google.api.http) = {
            get: "/v1/cards/{card_id}"
        };
    }

}

// ListCardsRequest is the request model for ListCards.
// TODO: pagination, sorting
message ListCardsRequest {

    // Filter is an optional search query to limit results with.
    message Filter {

        // query is the actual search query.
        string query = 1;

    }

    // Filter is the optional search query to limit results with. 
    // (ex: "Tonberry" will return "Tonberry" and "Tonberry King")
    Filter filter = 1;

}

// ListCardsResponse is the response model for ListCards.
message ListCardsResponse {

    // cards is the list of cards.
    repeated Card cards = 1;

}

// DescribeCardRequest is the request model for DescribeCard.
message DescribeCardRequest {

    // card_id is the ID of the card to describe.
    string card_id = 1 [(validate.rules).string.uuid = true];

}

// DescribeCardResponse is the response model for DescribeCard.
message DescribeCardResponse {

    // card is the card entity that was described.
    Card card = 1;

}