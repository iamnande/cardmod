syntax = "proto3";

package iamnande.cardmod.refinement.v1;

import "iamnande/cardmod/refinement/v1/refinement.proto";
import "validate/validate.proto";

option go_package = "github.com/iamnande/cardmod/pkg/api/refinementv1;refinementv1";

// Refinement API Service.
service RefinementAPI {

    // Gets a refinement.
    rpc GetRefinement(GetRefinementRequest) returns (Refinement);

    // Lists a collection of refinements.
    rpc ListRefinements(ListRefinementsRequest) returns (ListRefinementsResponse);

}

// Request schema for the GetRefinement request.
// NOTE: one or the other is preferred, if both are supplied it is up to the caller
//       to ensure the source does, in fact, refine into the target.
message GetRefinementRequest {

    // Get a refinement by its source.
    string source = 1 [(validate.rules).string = {
        pattern: "^[-, \\w]+$",
        min_len: 3,
        max_len: 25,
    }];

    // Get a refinement by its target.
    string target = 2 [(validate.rules).string = {
        pattern: "^[-, \\w]+$",
        min_len: 3,
        max_len: 25,
    }];

}

// Request schema for the ListRefinements request.
// TODO: pagination, filtering, and sorting
message ListRefinementsRequest {}

// Response schema for the ListRefinements request.
message ListRefinementsResponse {

    // The collection of refinements
    repeated Refinement refinements = 1;

}