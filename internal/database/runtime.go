// Code generated by entc, DO NOT EDIT.

package database

import (
	"github.com/iamnande/cardmod/internal/database/card"
	"github.com/iamnande/cardmod/internal/database/item"
	"github.com/iamnande/cardmod/internal/database/limitbreak"
	"github.com/iamnande/cardmod/internal/database/magic"
	"github.com/iamnande/cardmod/internal/database/refinement"
	"github.com/iamnande/cardmod/internal/database/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	cardFields := schema.Card{}.Fields()
	_ = cardFields
	// cardDescName is the schema descriptor for name field.
	cardDescName := cardFields[0].Descriptor()
	// card.NameValidator is a validator for the "name" field. It is called by the builders before save.
	card.NameValidator = cardDescName.Validators[0].(func(string) error)
	// cardDescLevel is the schema descriptor for level field.
	cardDescLevel := cardFields[1].Descriptor()
	// card.LevelValidator is a validator for the "level" field. It is called by the builders before save.
	card.LevelValidator = func() func(int32) error {
		validators := cardDescLevel.Validators
		fns := [...]func(int32) error{
			validators[0].(func(int32) error),
			validators[1].(func(int32) error),
		}
		return func(level int32) error {
			for _, fn := range fns {
				if err := fn(level); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	itemFields := schema.Item{}.Fields()
	_ = itemFields
	// itemDescName is the schema descriptor for name field.
	itemDescName := itemFields[0].Descriptor()
	// item.NameValidator is a validator for the "name" field. It is called by the builders before save.
	item.NameValidator = itemDescName.Validators[0].(func(string) error)
	limitbreakFields := schema.LimitBreak{}.Fields()
	_ = limitbreakFields
	// limitbreakDescName is the schema descriptor for name field.
	limitbreakDescName := limitbreakFields[0].Descriptor()
	// limitbreak.NameValidator is a validator for the "name" field. It is called by the builders before save.
	limitbreak.NameValidator = limitbreakDescName.Validators[0].(func(string) error)
	magicFields := schema.Magic{}.Fields()
	_ = magicFields
	// magicDescName is the schema descriptor for name field.
	magicDescName := magicFields[0].Descriptor()
	// magic.NameValidator is a validator for the "name" field. It is called by the builders before save.
	magic.NameValidator = magicDescName.Validators[0].(func(string) error)
	refinementFields := schema.Refinement{}.Fields()
	_ = refinementFields
	// refinementDescSource is the schema descriptor for source field.
	refinementDescSource := refinementFields[0].Descriptor()
	// refinement.SourceValidator is a validator for the "source" field. It is called by the builders before save.
	refinement.SourceValidator = refinementDescSource.Validators[0].(func(string) error)
	// refinementDescTarget is the schema descriptor for target field.
	refinementDescTarget := refinementFields[1].Descriptor()
	// refinement.TargetValidator is a validator for the "target" field. It is called by the builders before save.
	refinement.TargetValidator = refinementDescTarget.Validators[0].(func(string) error)
	// refinementDescNumerator is the schema descriptor for numerator field.
	refinementDescNumerator := refinementFields[2].Descriptor()
	// refinement.NumeratorValidator is a validator for the "numerator" field. It is called by the builders before save.
	refinement.NumeratorValidator = refinementDescNumerator.Validators[0].(func(int32) error)
	// refinementDescDenominator is the schema descriptor for denominator field.
	refinementDescDenominator := refinementFields[3].Descriptor()
	// refinement.DenominatorValidator is a validator for the "denominator" field. It is called by the builders before save.
	refinement.DenominatorValidator = refinementDescDenominator.Validators[0].(func(int32) error)
}
