// Code generated by entc, DO NOT EDIT.

package database

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iamnande/cardmod/internal/database/limitbreak"
	"github.com/iamnande/cardmod/internal/database/predicate"
)

// LimitBreakUpdate is the builder for updating LimitBreak entities.
type LimitBreakUpdate struct {
	config
	hooks    []Hook
	mutation *LimitBreakMutation
}

// Where appends a list predicates to the LimitBreakUpdate builder.
func (lbu *LimitBreakUpdate) Where(ps ...predicate.LimitBreak) *LimitBreakUpdate {
	lbu.mutation.Where(ps...)
	return lbu
}

// SetName sets the "name" field.
func (lbu *LimitBreakUpdate) SetName(s string) *LimitBreakUpdate {
	lbu.mutation.SetName(s)
	return lbu
}

// Mutation returns the LimitBreakMutation object of the builder.
func (lbu *LimitBreakUpdate) Mutation() *LimitBreakMutation {
	return lbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lbu *LimitBreakUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lbu.hooks) == 0 {
		if err = lbu.check(); err != nil {
			return 0, err
		}
		affected, err = lbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LimitBreakMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lbu.check(); err != nil {
				return 0, err
			}
			lbu.mutation = mutation
			affected, err = lbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lbu.hooks) - 1; i >= 0; i-- {
			if lbu.hooks[i] == nil {
				return 0, fmt.Errorf("database: uninitialized hook (forgotten import database/runtime?)")
			}
			mut = lbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lbu *LimitBreakUpdate) SaveX(ctx context.Context) int {
	affected, err := lbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lbu *LimitBreakUpdate) Exec(ctx context.Context) error {
	_, err := lbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbu *LimitBreakUpdate) ExecX(ctx context.Context) {
	if err := lbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lbu *LimitBreakUpdate) check() error {
	if v, ok := lbu.mutation.Name(); ok {
		if err := limitbreak.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("database: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (lbu *LimitBreakUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   limitbreak.Table,
			Columns: limitbreak.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: limitbreak.FieldID,
			},
		},
	}
	if ps := lbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lbu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: limitbreak.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{limitbreak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LimitBreakUpdateOne is the builder for updating a single LimitBreak entity.
type LimitBreakUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LimitBreakMutation
}

// SetName sets the "name" field.
func (lbuo *LimitBreakUpdateOne) SetName(s string) *LimitBreakUpdateOne {
	lbuo.mutation.SetName(s)
	return lbuo
}

// Mutation returns the LimitBreakMutation object of the builder.
func (lbuo *LimitBreakUpdateOne) Mutation() *LimitBreakMutation {
	return lbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lbuo *LimitBreakUpdateOne) Select(field string, fields ...string) *LimitBreakUpdateOne {
	lbuo.fields = append([]string{field}, fields...)
	return lbuo
}

// Save executes the query and returns the updated LimitBreak entity.
func (lbuo *LimitBreakUpdateOne) Save(ctx context.Context) (*LimitBreak, error) {
	var (
		err  error
		node *LimitBreak
	)
	if len(lbuo.hooks) == 0 {
		if err = lbuo.check(); err != nil {
			return nil, err
		}
		node, err = lbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LimitBreakMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lbuo.check(); err != nil {
				return nil, err
			}
			lbuo.mutation = mutation
			node, err = lbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lbuo.hooks) - 1; i >= 0; i-- {
			if lbuo.hooks[i] == nil {
				return nil, fmt.Errorf("database: uninitialized hook (forgotten import database/runtime?)")
			}
			mut = lbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lbuo *LimitBreakUpdateOne) SaveX(ctx context.Context) *LimitBreak {
	node, err := lbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lbuo *LimitBreakUpdateOne) Exec(ctx context.Context) error {
	_, err := lbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbuo *LimitBreakUpdateOne) ExecX(ctx context.Context) {
	if err := lbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lbuo *LimitBreakUpdateOne) check() error {
	if v, ok := lbuo.mutation.Name(); ok {
		if err := limitbreak.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("database: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (lbuo *LimitBreakUpdateOne) sqlSave(ctx context.Context) (_node *LimitBreak, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   limitbreak.Table,
			Columns: limitbreak.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: limitbreak.FieldID,
			},
		},
	}
	id, ok := lbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LimitBreak.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := lbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, limitbreak.FieldID)
		for _, f := range fields {
			if !limitbreak.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("database: invalid field %q for query", f)}
			}
			if f != limitbreak.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lbuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: limitbreak.FieldName,
		})
	}
	_node = &LimitBreak{config: lbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{limitbreak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
