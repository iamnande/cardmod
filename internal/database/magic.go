// Code generated by entc, DO NOT EDIT.

package database

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/iamnande/cardmod/internal/database/magic"
)

// Magic is the model entity for the Magic schema.
type Magic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Purpose holds the value of the "purpose" field.
	Purpose magic.Purpose `json:"purpose,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Magic) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case magic.FieldID:
			values[i] = new(sql.NullInt64)
		case magic.FieldName, magic.FieldPurpose:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Magic", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Magic fields.
func (m *Magic) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case magic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case magic.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case magic.FieldPurpose:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purpose", values[i])
			} else if value.Valid {
				m.Purpose = magic.Purpose(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Magic.
// Note that you need to call Magic.Unwrap() before calling this method if this Magic
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Magic) Update() *MagicUpdateOne {
	return (&MagicClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Magic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Magic) Unwrap() *Magic {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("database: Magic is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Magic) String() string {
	var builder strings.Builder
	builder.WriteString("Magic(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", purpose=")
	builder.WriteString(fmt.Sprintf("%v", m.Purpose))
	builder.WriteByte(')')
	return builder.String()
}

// Magics is a parsable slice of Magic.
type Magics []*Magic

func (m Magics) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
