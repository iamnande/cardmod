// Code generated by entc, DO NOT EDIT.

package database

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iamnande/cardmod/internal/database/refinement"
)

// RefinementCreate is the builder for creating a Refinement entity.
type RefinementCreate struct {
	config
	mutation *RefinementMutation
	hooks    []Hook
}

// SetSource sets the "source" field.
func (rc *RefinementCreate) SetSource(s string) *RefinementCreate {
	rc.mutation.SetSource(s)
	return rc
}

// SetTarget sets the "target" field.
func (rc *RefinementCreate) SetTarget(s string) *RefinementCreate {
	rc.mutation.SetTarget(s)
	return rc
}

// SetNumerator sets the "numerator" field.
func (rc *RefinementCreate) SetNumerator(i int32) *RefinementCreate {
	rc.mutation.SetNumerator(i)
	return rc
}

// SetDenominator sets the "denominator" field.
func (rc *RefinementCreate) SetDenominator(i int32) *RefinementCreate {
	rc.mutation.SetDenominator(i)
	return rc
}

// Mutation returns the RefinementMutation object of the builder.
func (rc *RefinementCreate) Mutation() *RefinementMutation {
	return rc.mutation
}

// Save creates the Refinement in the database.
func (rc *RefinementCreate) Save(ctx context.Context) (*Refinement, error) {
	var (
		err  error
		node *Refinement
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RefinementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("database: uninitialized hook (forgotten import database/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RefinementCreate) SaveX(ctx context.Context) *Refinement {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RefinementCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RefinementCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RefinementCreate) check() error {
	if _, ok := rc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`database: missing required field "source"`)}
	}
	if v, ok := rc.mutation.Source(); ok {
		if err := refinement.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`database: validator failed for field "source": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Target(); !ok {
		return &ValidationError{Name: "target", err: errors.New(`database: missing required field "target"`)}
	}
	if v, ok := rc.mutation.Target(); ok {
		if err := refinement.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`database: validator failed for field "target": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Numerator(); !ok {
		return &ValidationError{Name: "numerator", err: errors.New(`database: missing required field "numerator"`)}
	}
	if v, ok := rc.mutation.Numerator(); ok {
		if err := refinement.NumeratorValidator(v); err != nil {
			return &ValidationError{Name: "numerator", err: fmt.Errorf(`database: validator failed for field "numerator": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Denominator(); !ok {
		return &ValidationError{Name: "denominator", err: errors.New(`database: missing required field "denominator"`)}
	}
	if v, ok := rc.mutation.Denominator(); ok {
		if err := refinement.DenominatorValidator(v); err != nil {
			return &ValidationError{Name: "denominator", err: fmt.Errorf(`database: validator failed for field "denominator": %w`, err)}
		}
	}
	return nil
}

func (rc *RefinementCreate) sqlSave(ctx context.Context) (*Refinement, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RefinementCreate) createSpec() (*Refinement, *sqlgraph.CreateSpec) {
	var (
		_node = &Refinement{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: refinement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: refinement.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: refinement.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := rc.mutation.Target(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: refinement.FieldTarget,
		})
		_node.Target = value
	}
	if value, ok := rc.mutation.Numerator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: refinement.FieldNumerator,
		})
		_node.Numerator = value
	}
	if value, ok := rc.mutation.Denominator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: refinement.FieldDenominator,
		})
		_node.Denominator = value
	}
	return _node, _spec
}

// RefinementCreateBulk is the builder for creating many Refinement entities in bulk.
type RefinementCreateBulk struct {
	config
	builders []*RefinementCreate
}

// Save creates the Refinement entities in the database.
func (rcb *RefinementCreateBulk) Save(ctx context.Context) ([]*Refinement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Refinement, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefinementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RefinementCreateBulk) SaveX(ctx context.Context) []*Refinement {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RefinementCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RefinementCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
