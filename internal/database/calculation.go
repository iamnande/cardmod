// Code generated by entc, DO NOT EDIT.

package database

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iamnande/cardmod/internal/database/calculation"
)

// Calculation is the model entity for the Calculation schema.
type Calculation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CardID holds the value of the "card_id" field.
	CardID uuid.UUID `json:"card_id,omitempty"`
	// MagicID holds the value of the "magic_id" field.
	MagicID uuid.UUID `json:"magic_id,omitempty"`
	// CardRatio holds the value of the "card_ratio" field.
	CardRatio int32 `json:"card_ratio,omitempty"`
	// MagicRatio holds the value of the "magic_ratio" field.
	MagicRatio int32 `json:"magic_ratio,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Calculation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case calculation.FieldCardRatio, calculation.FieldMagicRatio:
			values[i] = new(sql.NullInt64)
		case calculation.FieldID, calculation.FieldCardID, calculation.FieldMagicID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Calculation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Calculation fields.
func (c *Calculation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case calculation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case calculation.FieldCardID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field card_id", values[i])
			} else if value != nil {
				c.CardID = *value
			}
		case calculation.FieldMagicID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field magic_id", values[i])
			} else if value != nil {
				c.MagicID = *value
			}
		case calculation.FieldCardRatio:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field card_ratio", values[i])
			} else if value.Valid {
				c.CardRatio = int32(value.Int64)
			}
		case calculation.FieldMagicRatio:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field magic_ratio", values[i])
			} else if value.Valid {
				c.MagicRatio = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Calculation.
// Note that you need to call Calculation.Unwrap() before calling this method if this Calculation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Calculation) Update() *CalculationUpdateOne {
	return (&CalculationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Calculation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Calculation) Unwrap() *Calculation {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("database: Calculation is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Calculation) String() string {
	var builder strings.Builder
	builder.WriteString("Calculation(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", card_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CardID))
	builder.WriteString(", magic_id=")
	builder.WriteString(fmt.Sprintf("%v", c.MagicID))
	builder.WriteString(", card_ratio=")
	builder.WriteString(fmt.Sprintf("%v", c.CardRatio))
	builder.WriteString(", magic_ratio=")
	builder.WriteString(fmt.Sprintf("%v", c.MagicRatio))
	builder.WriteByte(')')
	return builder.String()
}

// Calculations is a parsable slice of Calculation.
type Calculations []*Calculation

func (c Calculations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
