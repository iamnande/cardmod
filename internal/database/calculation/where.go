// Code generated by entc, DO NOT EDIT.

package calculation

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iamnande/cardmod/internal/database/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CardID applies equality check predicate on the "card_id" field. It's identical to CardIDEQ.
func CardID(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardID), v))
	})
}

// MagicID applies equality check predicate on the "magic_id" field. It's identical to MagicIDEQ.
func MagicID(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMagicID), v))
	})
}

// CardRatio applies equality check predicate on the "card_ratio" field. It's identical to CardRatioEQ.
func CardRatio(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardRatio), v))
	})
}

// MagicRatio applies equality check predicate on the "magic_ratio" field. It's identical to MagicRatioEQ.
func MagicRatio(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMagicRatio), v))
	})
}

// CardIDEQ applies the EQ predicate on the "card_id" field.
func CardIDEQ(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardID), v))
	})
}

// CardIDNEQ applies the NEQ predicate on the "card_id" field.
func CardIDNEQ(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardID), v))
	})
}

// CardIDIn applies the In predicate on the "card_id" field.
func CardIDIn(vs ...uuid.UUID) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCardID), v...))
	})
}

// CardIDNotIn applies the NotIn predicate on the "card_id" field.
func CardIDNotIn(vs ...uuid.UUID) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCardID), v...))
	})
}

// CardIDGT applies the GT predicate on the "card_id" field.
func CardIDGT(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardID), v))
	})
}

// CardIDGTE applies the GTE predicate on the "card_id" field.
func CardIDGTE(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardID), v))
	})
}

// CardIDLT applies the LT predicate on the "card_id" field.
func CardIDLT(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardID), v))
	})
}

// CardIDLTE applies the LTE predicate on the "card_id" field.
func CardIDLTE(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardID), v))
	})
}

// MagicIDEQ applies the EQ predicate on the "magic_id" field.
func MagicIDEQ(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMagicID), v))
	})
}

// MagicIDNEQ applies the NEQ predicate on the "magic_id" field.
func MagicIDNEQ(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMagicID), v))
	})
}

// MagicIDIn applies the In predicate on the "magic_id" field.
func MagicIDIn(vs ...uuid.UUID) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMagicID), v...))
	})
}

// MagicIDNotIn applies the NotIn predicate on the "magic_id" field.
func MagicIDNotIn(vs ...uuid.UUID) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMagicID), v...))
	})
}

// MagicIDGT applies the GT predicate on the "magic_id" field.
func MagicIDGT(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMagicID), v))
	})
}

// MagicIDGTE applies the GTE predicate on the "magic_id" field.
func MagicIDGTE(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMagicID), v))
	})
}

// MagicIDLT applies the LT predicate on the "magic_id" field.
func MagicIDLT(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMagicID), v))
	})
}

// MagicIDLTE applies the LTE predicate on the "magic_id" field.
func MagicIDLTE(v uuid.UUID) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMagicID), v))
	})
}

// CardRatioEQ applies the EQ predicate on the "card_ratio" field.
func CardRatioEQ(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardRatio), v))
	})
}

// CardRatioNEQ applies the NEQ predicate on the "card_ratio" field.
func CardRatioNEQ(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardRatio), v))
	})
}

// CardRatioIn applies the In predicate on the "card_ratio" field.
func CardRatioIn(vs ...int32) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCardRatio), v...))
	})
}

// CardRatioNotIn applies the NotIn predicate on the "card_ratio" field.
func CardRatioNotIn(vs ...int32) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCardRatio), v...))
	})
}

// CardRatioGT applies the GT predicate on the "card_ratio" field.
func CardRatioGT(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardRatio), v))
	})
}

// CardRatioGTE applies the GTE predicate on the "card_ratio" field.
func CardRatioGTE(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardRatio), v))
	})
}

// CardRatioLT applies the LT predicate on the "card_ratio" field.
func CardRatioLT(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardRatio), v))
	})
}

// CardRatioLTE applies the LTE predicate on the "card_ratio" field.
func CardRatioLTE(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardRatio), v))
	})
}

// MagicRatioEQ applies the EQ predicate on the "magic_ratio" field.
func MagicRatioEQ(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMagicRatio), v))
	})
}

// MagicRatioNEQ applies the NEQ predicate on the "magic_ratio" field.
func MagicRatioNEQ(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMagicRatio), v))
	})
}

// MagicRatioIn applies the In predicate on the "magic_ratio" field.
func MagicRatioIn(vs ...int32) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMagicRatio), v...))
	})
}

// MagicRatioNotIn applies the NotIn predicate on the "magic_ratio" field.
func MagicRatioNotIn(vs ...int32) predicate.Calculation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calculation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMagicRatio), v...))
	})
}

// MagicRatioGT applies the GT predicate on the "magic_ratio" field.
func MagicRatioGT(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMagicRatio), v))
	})
}

// MagicRatioGTE applies the GTE predicate on the "magic_ratio" field.
func MagicRatioGTE(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMagicRatio), v))
	})
}

// MagicRatioLT applies the LT predicate on the "magic_ratio" field.
func MagicRatioLT(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMagicRatio), v))
	})
}

// MagicRatioLTE applies the LTE predicate on the "magic_ratio" field.
func MagicRatioLTE(v int32) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMagicRatio), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Calculation) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Calculation) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Calculation) predicate.Calculation {
	return predicate.Calculation(func(s *sql.Selector) {
		p(s.Not())
	})
}
