// Code generated by entc, DO NOT EDIT.

package magic

import (
	"fmt"
)

const (
	// Label holds the string label denoting the magic type in the database.
	Label = "magic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPurpose holds the string denoting the purpose field in the database.
	FieldPurpose = "purpose"
	// Table holds the table name of the magic in the database.
	Table = "magics"
)

// Columns holds all SQL columns for magic fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPurpose,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Purpose defines the type for the "purpose" enum field.
type Purpose string

// Purpose values.
const (
	PurposeOffensive   Purpose = "Offensive"
	PurposeRestorative Purpose = "Restorative"
	PurposeIndirect    Purpose = "Indirect"
)

func (pu Purpose) String() string {
	return string(pu)
}

// PurposeValidator is a validator for the "purpose" field enum values. It is called by the builders before save.
func PurposeValidator(pu Purpose) error {
	switch pu {
	case PurposeOffensive, PurposeRestorative, PurposeIndirect:
		return nil
	default:
		return fmt.Errorf("magic: invalid enum value for purpose field: %q", pu)
	}
}
