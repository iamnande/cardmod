// Code generated by MockGen. DO NOT EDIT.
// Source: limitbreak.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLimitBreak is a mock of LimitBreak interface.
type MockLimitBreak struct {
	ctrl     *gomock.Controller
	recorder *MockLimitBreakMockRecorder
}

// MockLimitBreakMockRecorder is the mock recorder for MockLimitBreak.
type MockLimitBreakMockRecorder struct {
	mock *MockLimitBreak
}

// NewMockLimitBreak creates a new mock instance.
func NewMockLimitBreak(ctrl *gomock.Controller) *MockLimitBreak {
	mock := &MockLimitBreak{ctrl: ctrl}
	mock.recorder = &MockLimitBreakMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitBreak) EXPECT() *MockLimitBreakMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockLimitBreak) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLimitBreakMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLimitBreak)(nil).Name))
}
