// Code generated by MockGen. DO NOT EDIT.
// Source: refinement.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRefinement is a mock of Refinement interface.
type MockRefinement struct {
	ctrl     *gomock.Controller
	recorder *MockRefinementMockRecorder
}

// MockRefinementMockRecorder is the mock recorder for MockRefinement.
type MockRefinementMockRecorder struct {
	mock *MockRefinement
}

// NewMockRefinement creates a new mock instance.
func NewMockRefinement(ctrl *gomock.Controller) *MockRefinement {
	mock := &MockRefinement{ctrl: ctrl}
	mock.recorder = &MockRefinementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefinement) EXPECT() *MockRefinementMockRecorder {
	return m.recorder
}

// Denominator mocks base method.
func (m *MockRefinement) Denominator() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Denominator")
	ret0, _ := ret[0].(int32)
	return ret0
}

// Denominator indicates an expected call of Denominator.
func (mr *MockRefinementMockRecorder) Denominator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Denominator", reflect.TypeOf((*MockRefinement)(nil).Denominator))
}

// Numerator mocks base method.
func (m *MockRefinement) Numerator() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Numerator")
	ret0, _ := ret[0].(int32)
	return ret0
}

// Numerator indicates an expected call of Numerator.
func (mr *MockRefinementMockRecorder) Numerator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Numerator", reflect.TypeOf((*MockRefinement)(nil).Numerator))
}

// Source mocks base method.
func (m *MockRefinement) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockRefinementMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockRefinement)(nil).Source))
}

// Target mocks base method.
func (m *MockRefinement) Target() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(string)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockRefinementMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockRefinement)(nil).Target))
}
