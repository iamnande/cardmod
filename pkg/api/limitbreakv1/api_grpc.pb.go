// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: iamnande/cardmod/limitbreak/v1/api.proto

package limitbreakv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LimitBreakAPIClient is the client API for LimitBreakAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitBreakAPIClient interface {
	// Gets a limitbreak.
	GetLimitBreak(ctx context.Context, in *GetLimitBreakRequest, opts ...grpc.CallOption) (*LimitBreak, error)
	// Lists a collection of limitbreaks.
	ListLimitBreaks(ctx context.Context, in *ListLimitBreaksRequest, opts ...grpc.CallOption) (*ListLimitBreaksResponse, error)
}

type limitBreakAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitBreakAPIClient(cc grpc.ClientConnInterface) LimitBreakAPIClient {
	return &limitBreakAPIClient{cc}
}

func (c *limitBreakAPIClient) GetLimitBreak(ctx context.Context, in *GetLimitBreakRequest, opts ...grpc.CallOption) (*LimitBreak, error) {
	out := new(LimitBreak)
	err := c.cc.Invoke(ctx, "/iamnande.cardmod.limitbreak.v1.LimitBreakAPI/GetLimitBreak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitBreakAPIClient) ListLimitBreaks(ctx context.Context, in *ListLimitBreaksRequest, opts ...grpc.CallOption) (*ListLimitBreaksResponse, error) {
	out := new(ListLimitBreaksResponse)
	err := c.cc.Invoke(ctx, "/iamnande.cardmod.limitbreak.v1.LimitBreakAPI/ListLimitBreaks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimitBreakAPIServer is the server API for LimitBreakAPI service.
// All implementations must embed UnimplementedLimitBreakAPIServer
// for forward compatibility
type LimitBreakAPIServer interface {
	// Gets a limitbreak.
	GetLimitBreak(context.Context, *GetLimitBreakRequest) (*LimitBreak, error)
	// Lists a collection of limitbreaks.
	ListLimitBreaks(context.Context, *ListLimitBreaksRequest) (*ListLimitBreaksResponse, error)
	mustEmbedUnimplementedLimitBreakAPIServer()
}

// UnimplementedLimitBreakAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLimitBreakAPIServer struct {
}

func (UnimplementedLimitBreakAPIServer) GetLimitBreak(context.Context, *GetLimitBreakRequest) (*LimitBreak, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitBreak not implemented")
}
func (UnimplementedLimitBreakAPIServer) ListLimitBreaks(context.Context, *ListLimitBreaksRequest) (*ListLimitBreaksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLimitBreaks not implemented")
}
func (UnimplementedLimitBreakAPIServer) mustEmbedUnimplementedLimitBreakAPIServer() {}

// UnsafeLimitBreakAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitBreakAPIServer will
// result in compilation errors.
type UnsafeLimitBreakAPIServer interface {
	mustEmbedUnimplementedLimitBreakAPIServer()
}

func RegisterLimitBreakAPIServer(s grpc.ServiceRegistrar, srv LimitBreakAPIServer) {
	s.RegisterService(&LimitBreakAPI_ServiceDesc, srv)
}

func _LimitBreakAPI_GetLimitBreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitBreakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitBreakAPIServer).GetLimitBreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamnande.cardmod.limitbreak.v1.LimitBreakAPI/GetLimitBreak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitBreakAPIServer).GetLimitBreak(ctx, req.(*GetLimitBreakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitBreakAPI_ListLimitBreaks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLimitBreaksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitBreakAPIServer).ListLimitBreaks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamnande.cardmod.limitbreak.v1.LimitBreakAPI/ListLimitBreaks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitBreakAPIServer).ListLimitBreaks(ctx, req.(*ListLimitBreaksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LimitBreakAPI_ServiceDesc is the grpc.ServiceDesc for LimitBreakAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LimitBreakAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iamnande.cardmod.limitbreak.v1.LimitBreakAPI",
	HandlerType: (*LimitBreakAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLimitBreak",
			Handler:    _LimitBreakAPI_GetLimitBreak_Handler,
		},
		{
			MethodName: "ListLimitBreaks",
			Handler:    _LimitBreakAPI_ListLimitBreaks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iamnande/cardmod/limitbreak/v1/api.proto",
}
