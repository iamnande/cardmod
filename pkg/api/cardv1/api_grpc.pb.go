// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: iamnande/cardmod/card/v1/api.proto

package cardv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardAPIClient is the client API for CardAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardAPIClient interface {
	// CreateCard creates a new card resource.
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error)
	// DescribeCard describes a single card.
	DescribeCard(ctx context.Context, in *DescribeCardRequest, opts ...grpc.CallOption) (*DescribeCardResponse, error)
}

type cardAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCardAPIClient(cc grpc.ClientConnInterface) CardAPIClient {
	return &cardAPIClient{cc}
}

func (c *cardAPIClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error) {
	out := new(CreateCardResponse)
	err := c.cc.Invoke(ctx, "/iamnande.cardmod.card.v1.CardAPI/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardAPIClient) DescribeCard(ctx context.Context, in *DescribeCardRequest, opts ...grpc.CallOption) (*DescribeCardResponse, error) {
	out := new(DescribeCardResponse)
	err := c.cc.Invoke(ctx, "/iamnande.cardmod.card.v1.CardAPI/DescribeCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardAPIServer is the server API for CardAPI service.
// All implementations must embed UnimplementedCardAPIServer
// for forward compatibility
type CardAPIServer interface {
	// CreateCard creates a new card resource.
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	// DescribeCard describes a single card.
	DescribeCard(context.Context, *DescribeCardRequest) (*DescribeCardResponse, error)
	mustEmbedUnimplementedCardAPIServer()
}

// UnimplementedCardAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCardAPIServer struct {
}

func (UnimplementedCardAPIServer) CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardAPIServer) DescribeCard(context.Context, *DescribeCardRequest) (*DescribeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCard not implemented")
}
func (UnimplementedCardAPIServer) mustEmbedUnimplementedCardAPIServer() {}

// UnsafeCardAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardAPIServer will
// result in compilation errors.
type UnsafeCardAPIServer interface {
	mustEmbedUnimplementedCardAPIServer()
}

func RegisterCardAPIServer(s grpc.ServiceRegistrar, srv CardAPIServer) {
	s.RegisterService(&CardAPI_ServiceDesc, srv)
}

func _CardAPI_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardAPIServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamnande.cardmod.card.v1.CardAPI/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardAPIServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardAPI_DescribeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardAPIServer).DescribeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamnande.cardmod.card.v1.CardAPI/DescribeCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardAPIServer).DescribeCard(ctx, req.(*DescribeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardAPI_ServiceDesc is the grpc.ServiceDesc for CardAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iamnande.cardmod.card.v1.CardAPI",
	HandlerType: (*CardAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _CardAPI_CreateCard_Handler,
		},
		{
			MethodName: "DescribeCard",
			Handler:    _CardAPI_DescribeCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iamnande/cardmod/card/v1/api.proto",
}
