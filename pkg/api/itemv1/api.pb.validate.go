// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iamnande/cardmod/item/v1/api.proto

package itemv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetItemRequestMultiError,
// or nil if none found.
func (m *GetItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 25 {
		err := GetItemRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 25 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetItemRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetItemRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[-, \\\\w]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetItemRequestMultiError(errors)
	}
	return nil
}

// GetItemRequestMultiError is an error wrapping multiple validation errors
// returned by GetItemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemRequestMultiError) AllErrors() []error { return m }

// GetItemRequestValidationError is the validation error returned by
// GetItemRequest.Validate if the designated constraints aren't met.
type GetItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemRequestValidationError) ErrorName() string { return "GetItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemRequestValidationError{}

var _GetItemRequest_Name_Pattern = regexp.MustCompile("^[-, \\w]+$")

// Validate checks the field values on ListItemsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListItemsRequestMultiError, or nil if none found.
func (m *ListItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListItemsRequestMultiError(errors)
	}
	return nil
}

// ListItemsRequestMultiError is an error wrapping multiple validation errors
// returned by ListItemsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemsRequestMultiError) AllErrors() []error { return m }

// ListItemsRequestValidationError is the validation error returned by
// ListItemsRequest.Validate if the designated constraints aren't met.
type ListItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemsRequestValidationError) ErrorName() string { return "ListItemsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemsRequestValidationError{}

// Validate checks the field values on ListItemsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListItemsResponseMultiError, or nil if none found.
func (m *ListItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListItemsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListItemsResponseMultiError(errors)
	}
	return nil
}

// ListItemsResponseMultiError is an error wrapping multiple validation errors
// returned by ListItemsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemsResponseMultiError) AllErrors() []error { return m }

// ListItemsResponseValidationError is the validation error returned by
// ListItemsResponse.Validate if the designated constraints aren't met.
type ListItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemsResponseValidationError) ErrorName() string {
	return "ListItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemsResponseValidationError{}
