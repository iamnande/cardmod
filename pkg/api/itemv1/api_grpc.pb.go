// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: iamnande/cardmod/item/v1/api.proto

package itemv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemAPIClient is the client API for ItemAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemAPIClient interface {
	// Gets a item.
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error)
	// Lists a collection of items.
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
}

type itemAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewItemAPIClient(cc grpc.ClientConnInterface) ItemAPIClient {
	return &itemAPIClient{cc}
}

func (c *itemAPIClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/iamnande.cardmod.item.v1.ItemAPI/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemAPIClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, "/iamnande.cardmod.item.v1.ItemAPI/ListItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemAPIServer is the server API for ItemAPI service.
// All implementations must embed UnimplementedItemAPIServer
// for forward compatibility
type ItemAPIServer interface {
	// Gets a item.
	GetItem(context.Context, *GetItemRequest) (*Item, error)
	// Lists a collection of items.
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	mustEmbedUnimplementedItemAPIServer()
}

// UnimplementedItemAPIServer must be embedded to have forward compatible implementations.
type UnimplementedItemAPIServer struct {
}

func (UnimplementedItemAPIServer) GetItem(context.Context, *GetItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemAPIServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemAPIServer) mustEmbedUnimplementedItemAPIServer() {}

// UnsafeItemAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemAPIServer will
// result in compilation errors.
type UnsafeItemAPIServer interface {
	mustEmbedUnimplementedItemAPIServer()
}

func RegisterItemAPIServer(s grpc.ServiceRegistrar, srv ItemAPIServer) {
	s.RegisterService(&ItemAPI_ServiceDesc, srv)
}

func _ItemAPI_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemAPIServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamnande.cardmod.item.v1.ItemAPI/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemAPIServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemAPI_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemAPIServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamnande.cardmod.item.v1.ItemAPI/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemAPIServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemAPI_ServiceDesc is the grpc.ServiceDesc for ItemAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iamnande.cardmod.item.v1.ItemAPI",
	HandlerType: (*ItemAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ItemAPI_GetItem_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _ItemAPI_ListItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iamnande/cardmod/item/v1/api.proto",
}
