// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iamnande/cardmod/refinement/v1/api.proto

package refinementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRefinementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRefinementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRefinementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRefinementRequestMultiError, or nil if none found.
func (m *GetRefinementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRefinementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSource()); l < 3 || l > 25 {
		err := GetRefinementRequestValidationError{
			field:  "Source",
			reason: "value length must be between 3 and 25 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetRefinementRequest_Source_Pattern.MatchString(m.GetSource()) {
		err := GetRefinementRequestValidationError{
			field:  "Source",
			reason: "value does not match regex pattern \"^[-, \\\\w]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTarget()); l < 3 || l > 25 {
		err := GetRefinementRequestValidationError{
			field:  "Target",
			reason: "value length must be between 3 and 25 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetRefinementRequest_Target_Pattern.MatchString(m.GetTarget()) {
		err := GetRefinementRequestValidationError{
			field:  "Target",
			reason: "value does not match regex pattern \"^[-, \\\\w]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRefinementRequestMultiError(errors)
	}

	return nil
}

// GetRefinementRequestMultiError is an error wrapping multiple validation
// errors returned by GetRefinementRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRefinementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRefinementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRefinementRequestMultiError) AllErrors() []error { return m }

// GetRefinementRequestValidationError is the validation error returned by
// GetRefinementRequest.Validate if the designated constraints aren't met.
type GetRefinementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRefinementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRefinementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRefinementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRefinementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRefinementRequestValidationError) ErrorName() string {
	return "GetRefinementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRefinementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRefinementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRefinementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRefinementRequestValidationError{}

var _GetRefinementRequest_Source_Pattern = regexp.MustCompile("^[-, \\w]+$")

var _GetRefinementRequest_Target_Pattern = regexp.MustCompile("^[-, \\w]+$")

// Validate checks the field values on ListRefinementsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRefinementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRefinementsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRefinementsRequestMultiError, or nil if none found.
func (m *ListRefinementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRefinementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRefinementsRequestMultiError(errors)
	}

	return nil
}

// ListRefinementsRequestMultiError is an error wrapping multiple validation
// errors returned by ListRefinementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRefinementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRefinementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRefinementsRequestMultiError) AllErrors() []error { return m }

// ListRefinementsRequestValidationError is the validation error returned by
// ListRefinementsRequest.Validate if the designated constraints aren't met.
type ListRefinementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRefinementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRefinementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRefinementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRefinementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRefinementsRequestValidationError) ErrorName() string {
	return "ListRefinementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRefinementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRefinementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRefinementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRefinementsRequestValidationError{}

// Validate checks the field values on ListRefinementsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRefinementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRefinementsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRefinementsResponseMultiError, or nil if none found.
func (m *ListRefinementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRefinementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRefinements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRefinementsResponseValidationError{
						field:  fmt.Sprintf("Refinements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRefinementsResponseValidationError{
						field:  fmt.Sprintf("Refinements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRefinementsResponseValidationError{
					field:  fmt.Sprintf("Refinements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRefinementsResponseMultiError(errors)
	}

	return nil
}

// ListRefinementsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRefinementsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRefinementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRefinementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRefinementsResponseMultiError) AllErrors() []error { return m }

// ListRefinementsResponseValidationError is the validation error returned by
// ListRefinementsResponse.Validate if the designated constraints aren't met.
type ListRefinementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRefinementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRefinementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRefinementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRefinementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRefinementsResponseValidationError) ErrorName() string {
	return "ListRefinementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRefinementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRefinementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRefinementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRefinementsResponseValidationError{}
