// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iamnande/cardmod/magic/v1/api.proto

package magicv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListMagicsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMagicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMagicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMagicsRequestMultiError, or nil if none found.
func (m *ListMagicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMagicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMagicsRequestMultiError(errors)
	}

	return nil
}

// ListMagicsRequestMultiError is an error wrapping multiple validation errors
// returned by ListMagicsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMagicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMagicsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMagicsRequestMultiError) AllErrors() []error { return m }

// ListMagicsRequestValidationError is the validation error returned by
// ListMagicsRequest.Validate if the designated constraints aren't met.
type ListMagicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMagicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMagicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMagicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMagicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMagicsRequestValidationError) ErrorName() string {
	return "ListMagicsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMagicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMagicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMagicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMagicsRequestValidationError{}

// Validate checks the field values on ListMagicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMagicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMagicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMagicsResponseMultiError, or nil if none found.
func (m *ListMagicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMagicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMagics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMagicsResponseValidationError{
						field:  fmt.Sprintf("Magics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMagicsResponseValidationError{
						field:  fmt.Sprintf("Magics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMagicsResponseValidationError{
					field:  fmt.Sprintf("Magics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMagicsResponseMultiError(errors)
	}

	return nil
}

// ListMagicsResponseMultiError is an error wrapping multiple validation errors
// returned by ListMagicsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListMagicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMagicsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMagicsResponseMultiError) AllErrors() []error { return m }

// ListMagicsResponseValidationError is the validation error returned by
// ListMagicsResponse.Validate if the designated constraints aren't met.
type ListMagicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMagicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMagicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMagicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMagicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMagicsResponseValidationError) ErrorName() string {
	return "ListMagicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMagicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMagicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMagicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMagicsResponseValidationError{}

// Validate checks the field values on CreateMagicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMagicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMagicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMagicRequestMultiError, or nil if none found.
func (m *CreateMagicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMagicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateMagicRequestMultiError(errors)
	}

	return nil
}

// CreateMagicRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMagicRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMagicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMagicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMagicRequestMultiError) AllErrors() []error { return m }

// CreateMagicRequestValidationError is the validation error returned by
// CreateMagicRequest.Validate if the designated constraints aren't met.
type CreateMagicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMagicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMagicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMagicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMagicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMagicRequestValidationError) ErrorName() string {
	return "CreateMagicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMagicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMagicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMagicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMagicRequestValidationError{}

// Validate checks the field values on CreateMagicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMagicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMagicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMagicResponseMultiError, or nil if none found.
func (m *CreateMagicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMagicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMagic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMagicResponseValidationError{
					field:  "Magic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMagicResponseValidationError{
					field:  "Magic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMagic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMagicResponseValidationError{
				field:  "Magic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMagicResponseMultiError(errors)
	}

	return nil
}

// CreateMagicResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMagicResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMagicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMagicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMagicResponseMultiError) AllErrors() []error { return m }

// CreateMagicResponseValidationError is the validation error returned by
// CreateMagicResponse.Validate if the designated constraints aren't met.
type CreateMagicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMagicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMagicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMagicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMagicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMagicResponseValidationError) ErrorName() string {
	return "CreateMagicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMagicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMagicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMagicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMagicResponseValidationError{}

// Validate checks the field values on DescribeMagicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMagicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMagicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeMagicRequestMultiError, or nil if none found.
func (m *DescribeMagicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMagicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMagicId()); err != nil {
		err = DescribeMagicRequestValidationError{
			field:  "MagicId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeMagicRequestMultiError(errors)
	}

	return nil
}

func (m *DescribeMagicRequest) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DescribeMagicRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeMagicRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeMagicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMagicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMagicRequestMultiError) AllErrors() []error { return m }

// DescribeMagicRequestValidationError is the validation error returned by
// DescribeMagicRequest.Validate if the designated constraints aren't met.
type DescribeMagicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMagicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMagicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMagicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMagicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMagicRequestValidationError) ErrorName() string {
	return "DescribeMagicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMagicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMagicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMagicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMagicRequestValidationError{}

// Validate checks the field values on DescribeMagicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMagicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMagicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeMagicResponseMultiError, or nil if none found.
func (m *DescribeMagicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMagicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMagic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeMagicResponseValidationError{
					field:  "Magic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeMagicResponseValidationError{
					field:  "Magic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMagic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeMagicResponseValidationError{
				field:  "Magic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeMagicResponseMultiError(errors)
	}

	return nil
}

// DescribeMagicResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeMagicResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeMagicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMagicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMagicResponseMultiError) AllErrors() []error { return m }

// DescribeMagicResponseValidationError is the validation error returned by
// DescribeMagicResponse.Validate if the designated constraints aren't met.
type DescribeMagicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMagicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMagicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMagicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMagicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMagicResponseValidationError) ErrorName() string {
	return "DescribeMagicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMagicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMagicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMagicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMagicResponseValidationError{}

// Validate checks the field values on DeleteMagicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMagicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMagicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMagicRequestMultiError, or nil if none found.
func (m *DeleteMagicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMagicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMagicId()); err != nil {
		err = DeleteMagicRequestValidationError{
			field:  "MagicId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMagicRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteMagicRequest) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteMagicRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMagicRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMagicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMagicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMagicRequestMultiError) AllErrors() []error { return m }

// DeleteMagicRequestValidationError is the validation error returned by
// DeleteMagicRequest.Validate if the designated constraints aren't met.
type DeleteMagicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMagicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMagicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMagicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMagicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMagicRequestValidationError) ErrorName() string {
	return "DeleteMagicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMagicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMagicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMagicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMagicRequestValidationError{}

// Validate checks the field values on DeleteMagicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMagicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMagicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMagicResponseMultiError, or nil if none found.
func (m *DeleteMagicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMagicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMagicResponseMultiError(errors)
	}

	return nil
}

// DeleteMagicResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMagicResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMagicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMagicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMagicResponseMultiError) AllErrors() []error { return m }

// DeleteMagicResponseValidationError is the validation error returned by
// DeleteMagicResponse.Validate if the designated constraints aren't met.
type DeleteMagicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMagicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMagicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMagicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMagicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMagicResponseValidationError) ErrorName() string {
	return "DeleteMagicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMagicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMagicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMagicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMagicResponseValidationError{}
